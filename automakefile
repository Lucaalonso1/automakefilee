#!/usr/bin/env bash
##
## EPITECH PROJECT, 2024
## automakefile
## File description:
## Generate Makefile from configuration file
##

if [ "$#" -ne 1 ]; then
    echo "Error: Invalid argument."
    echo "Usage: $0 <config_file>"
    exit 84
fi

CONFIG_FILE="$1"
CONFIG_DIR=$(dirname "$CONFIG_FILE")
MAKEFILE="$CONFIG_DIR/Makefile"

# Verify if the config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file does not exist."
    exit 84
fi

declare -A config
declare -a sources

function add_to_makefile() {
    echo -e "$1" >> "$MAKEFILE"
}

function parse_config() {
    while IFS=';' read -r key value; do
        case "$key" in
            PROJECT_DIR) config[PROJECT_DIR]="$value" ;;
            SOURCES_DIR) config[SOURCES_DIR]="$value" ;;
            HEADERS_DIR) config[HEADERS_DIR]="$value" ;;
            LIBS_DIR) config[LIBS_DIR]="$value" ;;
            EXEC) config[EXEC]="$value" ;;
            CC) config[CC]="$value" ;;
            CFLAGS) config[CFLAGS]="$value" ;;
            LDFLAGS) config[LDFLAGS]="$value" ;;
            BCK_DIR) config[BCK_DIR]="$value" ;;
            ZIP) config[ZIP]="$value" ;;
            ZIPFLAGS) config[ZIPFLAGS]="$value" ;;
            UNZIP) config[UNZIP]="$value" ;;
            UNZIPFLAGS) config[UNZIPFLAGS]="$value" ;;
            *.c) sources+=("$key") ;;
        esac
    done < "$CONFIG_FILE"
}

parse_config

if [ -z "${config[PROJECT_DIR]}" ]; then
    echo "Error: PROJECT_DIR is mandatory in the configuration file."
    exit 84
fi

if [ ${#sources[@]} -eq 0 ]; then
    echo "Error: At least one source file is required in the configuration file."
    exit 84
fi

function write_header() {
    add_to_makefile "##"
    add_to_makefile "## EPITECH PROJECT, 2024"
    add_to_makefile "## Makefile"
    add_to_makefile "## File description:"
    add_to_makefile "## Generated by automakefile"
    add_to_makefile "##\n"
}

function write_directories() {
    add_to_makefile "D_SRC = ${config[SOURCES_DIR]}/"
    add_to_makefile "D_INC = ${config[HEADERS_DIR]}"
    add_to_makefile "D_LIB = ${config[LIBS_DIR]}"
}

function write_main_target() {
    add_to_makefile "all: \$(NAME)\n"
    add_to_makefile "\$(NAME): \$(OBJ)"
    add_to_makefile "\t\$(CC) -o \$(NAME) \$(OBJ) \$(CFLAGS) \$(LDFLAGS)\n"
}

function write_sources() {
    add_to_makefile "SRC = \\"
    for src in "${sources[@]}"; do
        add_to_makefile "\t\$(D_SRC)$src \\"
    done
    add_to_makefile "\nOBJ = \$(SRC:.c=.o)\n"
}

function write_flags() {
    add_to_makefile "CC = ${config[CC]}"
    add_to_makefile "CFLAGS = ${config[CFLAGS]} -I\$(D_INC)"
    add_to_makefile "LDFLAGS = ${config[LDFLAGS]}"
}

function write_clean_rules() {
    add_to_makefile "clean:"
    add_to_makefile "\trm -f \$(OBJ)\n"
    add_to_makefile "fclean: clean"
    add_to_makefile "\trm -f \$(NAME)\n"
    add_to_makefile "re: fclean all\n"
    add_to_makefile ".PHONY: all clean fclean re\n"
}

function write_version_management() {
    add_to_makefile "archive:"
    add_to_makefile "\t\$(ZIP) \$(ZIPFLAGS) \$(BCK_DIR)/\$(PROJECT_DIR)_backup.zip \$(D_SRC)* \$(D_INC)/*"
    add_to_makefile "\techo \$(BCK_DIR)/\$(PROJECT_DIR)_backup.zip file generated.\n"

    add_to_makefile "revert:"
    add_to_makefile "\t\$(UNZIP) \$(UNZIPFLAGS) \$(BCK_DIR)/\$(PROJECT_DIR)_backup.zip\n"

    add_to_makefile "num:"
    add_to_makefile "\techo Version 1.0\n"

    add_to_makefile "delete:"
    add_to_makefile "\trm -f \$(BCK_DIR)/\$(PROJECT_DIR)_backup.zip\n"
}

{
    write_header
    write_directories
    add_to_makefile "NAME = ${config[EXEC]}"
    add_to_makefile "PROJECT_DIR = ${config[PROJECT_DIR]}"
    add_to_makefile "BCK_DIR = ${config[BCK_DIR]}"
    write_sources
    write_flags
    write_main_target
    write_clean_rules
    write_version_management
} > "$MAKEFILE"

echo "Makefile generated successfully in $CONFIG_DIR."
exit 0
